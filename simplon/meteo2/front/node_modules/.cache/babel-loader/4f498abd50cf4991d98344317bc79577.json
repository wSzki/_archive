{"ast":null,"code":"var EventEmitter = require('events').EventEmitter,\n    inherits = require('inherits'),\n    debug = require('debug')('geolocation');\n\nvar currentPosition,\n    watchers = 0,\n    watcherHandle,\n    emitter = new EventEmitter();\nemitter.setMaxListeners(0);\nmodule.exports = exports = emitter;\nexports.options = {};\n\nexports.getCurrentPosition = function (callback) {\n  if (watchers) {\n    if (currentPosition) {\n      debug('get current location - cache hit');\n      process.nextTick(function () {\n        callback(null, currentPosition);\n      });\n    } else {\n      debug('get current location - cache fetching');\n\n      function changeListener(position) {\n        emitter.removeListener('error', errorListener);\n        callback(null, position);\n      }\n\n      function errorListener(error) {\n        emitter.removeListener('change', changeListener);\n        callback(error);\n      }\n\n      emitter.once('change', changeListener);\n      emitter.once('error', errorListener);\n    }\n\n    return;\n  }\n\n  debug('get current location - cache miss');\n  navigator.geolocation.getCurrentPosition(function (position) {\n    callback(null, position);\n  }, function (error) {\n    callback(error);\n  }, exports.options);\n};\n\nexports.createWatcher = function (callback) {\n  var watcher = new Watcher();\n\n  if (callback) {\n    watcher.on('change', callback);\n  }\n\n  watcher.start();\n  return watcher;\n};\n\nfunction Watcher() {\n  EventEmitter.call(this);\n  this.watching = false;\n  var self = this;\n\n  this.changeHandler = function (position) {\n    self.emit('change', position);\n  };\n}\n\ninherits(Watcher, EventEmitter);\nexports.Watcher = Watcher;\n\nWatcher.prototype.start = function () {\n  if (this.watching) return;\n  this.watching = true;\n  watchers++;\n  debug('start watcher');\n  emitter.on('change', this.changeHandler);\n\n  if (watchers === 1) {\n    debug('start geolocation watch position');\n    watcherHandle = navigator.geolocation.watchPosition(function (position) {\n      currentPosition = position;\n      emitter.emit('change', position);\n    }, function (error) {\n      emitter.emit('error', error);\n    }, this.options);\n  }\n};\n\nWatcher.prototype.stop = function () {\n  if (!this.watching) return;\n  this.watching = false;\n  watchers--;\n  emitter.removeListener('change', this.changeHandler);\n\n  if (!watchers) {\n    debug('clear geolocation watch');\n    navigator.geolocation.clearWatch(watcherHandle);\n  }\n};","map":{"version":3,"sources":["/home/wsz/meteo/node_modules/geolocation/index.js"],"names":["EventEmitter","require","inherits","debug","currentPosition","watchers","watcherHandle","emitter","setMaxListeners","module","exports","options","getCurrentPosition","callback","process","nextTick","changeListener","position","removeListener","errorListener","error","once","navigator","geolocation","createWatcher","watcher","Watcher","on","start","call","watching","self","changeHandler","emit","prototype","watchPosition","stop","clearWatch"],"mappings":"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","sourcesContent":["\nvar EventEmitter = require('events').EventEmitter\n  , inherits = require('inherits')\n  , debug = require('debug')('geolocation')\n\nvar currentPosition\n  , watchers = 0\n  , watcherHandle\n  , emitter = new EventEmitter()\n\nemitter.setMaxListeners(0)\n\nmodule.exports = exports = emitter\n\nexports.options = {}\n\nexports.getCurrentPosition = function (callback) {\n  if (watchers) {\n    if (currentPosition) {\n      debug('get current location - cache hit')\n      process.nextTick(function () {\n        callback(null, currentPosition)\n      })\n    } else {\n      debug('get current location - cache fetching')\n      function changeListener(position) {\n        emitter.removeListener('error', errorListener)\n        callback(null, position)\n      }\n      function errorListener(error) {\n        emitter.removeListener('change', changeListener)\n        callback(error)\n      }\n      emitter.once('change', changeListener)\n      emitter.once('error', errorListener)\n    }\n    return\n  }\n\n  debug('get current location - cache miss')\n  navigator.geolocation.getCurrentPosition(function (position) {\n    callback(null, position)\n  }, function (error) {\n    callback(error)\n  }, exports.options)\n}\n\nexports.createWatcher = function (callback) {\n  var watcher = new Watcher()\n\n  if (callback) {\n    watcher.on('change', callback)\n  }\n\n  watcher.start()\n\n  return watcher\n}\n\nfunction Watcher() {\n  EventEmitter.call(this)\n  this.watching = false\n\n  var self = this\n  this.changeHandler = function (position) {\n    self.emit('change', position)\n  }\n}\ninherits(Watcher, EventEmitter)\nexports.Watcher = Watcher\n\nWatcher.prototype.start = function () {\n  if (this.watching) return\n  this.watching = true\n  watchers++\n\n  debug('start watcher')\n\n  emitter.on('change', this.changeHandler)\n\n  if (watchers === 1) {\n    debug('start geolocation watch position')\n    watcherHandle = navigator.geolocation.watchPosition(function (position) {\n      currentPosition = position\n      emitter.emit('change', position)\n    }, function (error) {\n      emitter.emit('error', error)\n    }, this.options)\n  }\n}\n\nWatcher.prototype.stop = function () {\n  if (!this.watching) return\n  this.watching = false\n  watchers--\n\n  emitter.removeListener('change', this.changeHandler)\n\n  if (!watchers) {\n    debug('clear geolocation watch')\n    navigator.geolocation.clearWatch(watcherHandle)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}