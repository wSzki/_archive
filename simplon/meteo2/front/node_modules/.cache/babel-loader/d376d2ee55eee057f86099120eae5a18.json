{"ast":null,"code":"var _jsxFileName = \"/home/wsz/meteo/src/components/Search.js\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport \"../App.css\";\nimport dayjs from \"dayjs\";\nimport kc from \"./kelvinToCelcius\";\nconst api = \"d929b80c2587abdc6dbda7f96c9ff6c5\"; ////////////////////////////\n\nclass Weather {\n  constructor(temp, weather, date, icon) {\n    this.date = date;\n    this.temp = temp;\n    this.weather = weather;\n    this.icon = icon;\n  }\n\n} ///////////////////////////\n\n\nfunction Search(props) {\n  const [currentState, setCurrentState] = useState(\"\");\n  const [forecastHourlyState, setForecastHourlyState] = useState(\"\");\n  const [forecastDailyState, setForecastDailyState] = useState(\"\"); //////////////////////////\n\n  let current = [];\n  let forecastDaily = [];\n  let forecastHourly = [];\n  let x = 0;\n  let y = 0; //////////////////////////\n\n  function keyPress(a) {\n    if (a.key === \"Enter\") {\n      const date = new Date();\n      const cityValue = a.target.value; // Fetch to get longitutde and latitude to use with second API - Translate String to coordinates\n\n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityValue}&appid=${api}`).then(response => response.json()).then(data => {\n        // Fetching weather data with coordinates - Current - Forecast\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${data.coord.lat}&lon=${data.coord.lon}&appid=${api}`).then(response => response.json()).then(data => {\n          console.log(date.getDay());\n          data.daily.forEach(element => {\n            forecastDaily[x] = new Weather(kc(element.temp.day), element.weather[0].main + \" \", dayjs().add(x, \"day\").format(\"dddd DD/MM\"), element.weather[0].icon);\n            x++;\n          });\n          setForecastDailyState(forecastDaily.map(a => /*#__PURE__*/React.createElement(\"li\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 19\n            }\n          }, a.date, \" / \", a.temp, \" degrees C / \", a.weather)));\n          x = 0;\n          data.hourly.forEach(element => {\n            forecastHourly[x] = new Weather(kc(element.temp), element.weather[0].main + \" \", `H + ${x} : `, element.weather[0].icon);\n            x++;\n          });\n          setForecastHourlyState(forecastHourly.map(a => /*#__PURE__*/React.createElement(\"li\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 19\n            }\n          }, a.date, \" / \", a.temp, \" degrees C / \", a.weather)));\n          data.hourly.forEach(element => {\n            forecastHourly[y] = kc(element.temp) + \" \";\n            y++;\n          });\n          x = 0;\n          data.current.forEach(element => {\n            current[x] = new Weather(kc(element.temp), element.weather[0].main + \" \", `H + ${x} : `, element.weather[0].icon);\n            x++;\n          });\n          setForecastHourlyState(forecastHourly.map(a => /*#__PURE__*/React.createElement(\"li\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 19\n            }\n          }, a.date, \" / \", a.temp, \" degrees C / \", a.weather)));\n          data.hourly.forEach(element => {\n            forecastHourly[y] = kc(element.temp) + \" \";\n            y++;\n          });\n        });\n      }).catch(error => {\n        console.log(\"error\");\n      });\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onKeyPress: keyPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bgYellow textBlack0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bgRed textWhite1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, \"Today\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bgGrass\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, \"Daily Forecast\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bgGreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, forecastDailyState)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bgDusk\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, \"Hourly Forecast\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bgOrange overflowHidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, forecastHourlyState))));\n}\n\nexport default Search;","map":{"version":3,"sources":["/home/wsz/meteo/src/components/Search.js"],"names":["React","useState","dayjs","kc","api","Weather","constructor","temp","weather","date","icon","Search","props","currentState","setCurrentState","forecastHourlyState","setForecastHourlyState","forecastDailyState","setForecastDailyState","current","forecastDaily","forecastHourly","x","y","keyPress","a","key","Date","cityValue","target","value","fetch","then","response","json","data","coord","lat","lon","console","log","getDay","daily","forEach","element","day","main","add","format","map","hourly","catch","error"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport \"../App.css\";\nimport dayjs from \"dayjs\";\nimport kc from \"./kelvinToCelcius\";\n\nconst api = \"d929b80c2587abdc6dbda7f96c9ff6c5\";\n\n////////////////////////////\n\nclass Weather {\n  constructor(temp, weather, date, icon) {\n    this.date = date;\n    this.temp = temp;\n    this.weather = weather;\n    this.icon = icon;\n  }\n}\n///////////////////////////\n\nfunction Search(props) {\n  const [currentState, setCurrentState] = useState(\"\");\n  const [forecastHourlyState, setForecastHourlyState] = useState(\"\");\n  const [forecastDailyState, setForecastDailyState] = useState(\"\");\n\n  //////////////////////////\n  let current = []\n  let forecastDaily = [];\n  let forecastHourly = [];\n\n  let x = 0;\n  let y = 0;\n  //////////////////////////\n\n  function keyPress(a) {\n    if (a.key === \"Enter\") {\n      const date = new Date();\n      const cityValue = a.target.value;\n      // Fetch to get longitutde and latitude to use with second API - Translate String to coordinates\n      fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${cityValue}&appid=${api}`\n      )\n        .then((response) => response.json())\n        .then((data) => {\n          // Fetching weather data with coordinates - Current - Forecast\n          fetch(\n            `https://api.openweathermap.org/data/2.5/onecall?lat=${data.coord.lat}&lon=${data.coord.lon}&appid=${api}`\n          )\n            .then((response) => response.json())\n            .then((data) => {\n              console.log(date.getDay());\n\n              data.daily.forEach((element) => {\n                forecastDaily[x] = new Weather(\n                  kc(element.temp.day),\n                  element.weather[0].main + \" \",\n                  dayjs().add(x, \"day\").format(\"dddd DD/MM\"),\n                  element.weather[0].icon\n                );\n                x++;\n              });\n\n              setForecastDailyState(\n                forecastDaily.map((a) => (\n                  <li>\n                    {a.date} / {a.temp} degrees C / {a.weather}\n                  </li>\n                ))\n              );\n\n              x = 0;\n\n              data.hourly.forEach((element) => {\n                forecastHourly[x] = new Weather(\n                  kc(element.temp),\n                  element.weather[0].main + \" \",\n                  `H + ${x} : `,\n                  element.weather[0].icon\n                );\n                x++;\n              });\n\n              setForecastHourlyState(\n                forecastHourly.map((a) => (\n                  <li>\n                    {a.date} / {a.temp} degrees C / {a.weather}\n                  </li>\n                ))\n              );\n\n              data.hourly.forEach((element) => {\n                forecastHourly[y] = kc(element.temp) + \" \";\n                y++;\n              });\n              x = 0;\n\n              data.current.forEach((element) => {\n                current[x] = new Weather(\n                  kc(element.temp),\n                  element.weather[0].main + \" \",\n                  `H + ${x} : `,\n                  element.weather[0].icon\n                );\n                x++;\n              });\n\n              setForecastHourlyState(\n                forecastHourly.map((a) => (\n                  <li>\n                    {a.date} / {a.temp} degrees C / {a.weather}\n                  </li>\n                ))\n              );\n\n              data.hourly.forEach((element) => {\n                forecastHourly[y] = kc(element.temp) + \" \";\n                y++;\n              });\n            });\n        })\n\n\n        \n        .catch((error) => {\n          console.log(\"error\");\n        });\n    }\n  }\n\n  return (\n    <div>\n      <input onKeyPress={keyPress} />\n\n      <div className=\"bgYellow textBlack0\">\n        <div className=\"bgRed textWhite1\">Today</div>\n      </div>\n\n      <div className=\"flex row\">\n        <div>\n          <div className=\"bgGrass\">Daily Forecast</div>\n          <div className=\"bgGreen\">{forecastDailyState}</div>\n        </div>\n        <div>\n          <div className=\"bgDusk\">Hourly Forecast</div>\n          <div className=\"bgOrange overflowHidden\">{forecastHourlyState}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}